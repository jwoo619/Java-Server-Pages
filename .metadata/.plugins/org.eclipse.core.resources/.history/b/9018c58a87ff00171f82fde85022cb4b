package ex13;

import java.sql.ResultSet;

import java.sql.*;
import javax.sql.*;
import javax.naming.*;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;
import javax.naming.InitialContext;
import com.mysql.jdbc.Connection;
import com.mysql.jdbc.PreparedStatement;
import com.mysql.jdbc.StatementImpl;

public class MemberDAO {

	public static final int MEMBER_NONEXISTENT = 0;
	public static final int MEMBER_EXISTENT = 1;
	public static final int MEMBER_JOIN_FAIL = 0;
	public static final int MEMBER_JOIN_SUCCESS = 1;
	public static final int MEMBER_LOGIN_PW_NO_GOOD = 0;
	public static final int MEMBER_LOGIN_SUCCESS = 1;
	public static final int MEMBER_LOGIN_IS_NOT = -1;
	
	private static MemberDAO instance = new MemberDAO();
	
	private MemberDAO(){
		
	}
	
	public static MemberDAO getInstance(){
		return instance;
	}
	
	public int insertMember(MemberDTO dto){
		int ri = 0;
		
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		String query = "insert info members values (?,?,?,?,?,?);";
		
		try {
			Class.forName( "com.mysql.jdbc.Driver");
			connection = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/members", "root", "1234");
			preparedStatement = (PreparedStatement) connection.prepareStatement(query);
			preparedStatement.setString(1, dto.getId());
			preparedStatement.setString(2, dto.getPw());
			preparedStatement.setString(3, dto.getName());
			preparedStatement.setString(4, dto.getMail());
			preparedStatement.setTimestamp(5, dto.getDate());
			preparedStatement.setString(6, dto.getAddress());
			preparedStatement.executeUpdate();
			ri = MemberDAO.MEMBER_JOIN_SUCCESS;
			
		} catch (Exception e) {
			// TODO: handle exception
		}finally {
			try {
				if(preparedStatement != null) preparedStatement.close();
				if(connection != null) connection.close();
			} catch (Exception e2) {
				// TODO: handle exception
			}
		}
		System.out.println(ri);
		return ri;
	}
	
	public int confirmId(String id){
		int ri = 0;
		
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		String query = "select id from members where id = ?";
		
		try {
			
			Class.forName("com.mysql.jdbc.Driver");
			connection = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/members", "root", "1234");
			preparedStatement = (PreparedStatement) connection.prepareStatement(query);
			preparedStatement.setString(1, id);
			resultSet = preparedStatement.executeQuery();
			if(resultSet.next())
				ri = MemberDAO.MEMBER_EXISTENT;
			else
				ri = MemberDAO.MEMBER_NONEXISTENT;
			
			
		} catch (Exception e) {
			// TODO: handle exception
		}finally {
			try {
				resultSet.close();
				preparedStatement.close();
				connection.close();
			} catch (Exception e2) {
				// TODO: handle exception
			}
		}
		
		return ri;
	}
	
	public int userCheck(String id , String pw){
		int ri = 0;
		String dbPw;
		
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		String query = "select pw from members where id = ?";
		
		try {
			
			connection = getConnection();
			preparedStatement = (PreparedStatement) connection.prepareStatement(query);
			preparedStatement.setString(1, id);
			resultSet = preparedStatement.executeQuery();
			
			if(resultSet.next()){
				dbPw = resultSet.getString("pw");
				if(dbPw.equals(pw))
					ri = MemberDAO.MEMBER_LOGIN_SUCCESS;
				else
					ri = MemberDAO.MEMBER_LOGIN_PW_NO_GOOD;
			}
			else{
				ri = MemberDAO.MEMBER_LOGIN_IS_NOT;
			}
		} catch (Exception e) {
			// TODO: handle exception
		}finally {
			try {
				resultSet.close();
				preparedStatement.close();
				connection.close();
			} catch (Exception e2) {
				// TODO: handle exception
			}
		}
		
		
		return ri;
	}
	
	public MemberDTO getMember(String id) {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet set = null;
		String query = "select * from members where id = ?";
		MemberDTO dto = null;
		
		try {
			connection = getConnection();
			preparedStatement = (PreparedStatement) connection.prepareStatement(query);
			preparedStatement.setString(1, id);
			set = preparedStatement.executeQuery();
			
			if(set.next()) {
				dto = new MemberDTO();
				dto.setId(set.getString("id"));
				dto.setPw(set.getString("pw"));
				dto.setName(set.getString("name"));
				dto.setMail(set.getString("mail"));
				dto.setDate(set.getTimestamp("date"));
				dto.setAddress(set.getString("address"));
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				set.close();
				preparedStatement.close();
				connection.close();
			} catch (Exception e2) {
				e2.printStackTrace();
			}
		}
		
		return dto;
		
	}
	
	public int updateMember(MemberDTO dto) {
		int ri = 0;
		
		Connection connection = null;
		PreparedStatement pstmt = null;
		String query = "update members set pw=?, mail=?, address=? where id=?";
		
		try {
			connection = getConnection();
			pstmt = (PreparedStatement) connection.prepareStatement(query);
			pstmt.setString(1, dto.getPw());
			pstmt.setString(2, dto.getMail());
			pstmt.setString(3, dto.getAddress());
			pstmt.setString(4, dto.getId());
			ri = pstmt.executeUpdate();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				pstmt.close();
				connection.close();
			} catch (Exception e2) {
				e2.printStackTrace();
			}
		}
		
		return ri;
	}
	
/*	
	private Connection getConnection(){
		
		Context context = null;
		DataSource dataSource = null;
		Connection connection = null;
		try {
			context = (Context) new InitialContext();
			dataSource = (DataSource) context.lookup("java:comp/env/jdbc/mysql");
			connection = (Connection) dataSource.getConnection();
		} catch (Exception e) {
			// TODO: handle exception
		    System.out.println("nonono");
		}
		
		return connection;
	}
*/	

	
}
